{
  "address": "0x7BB43028DAbA56773861fBb71Bab114befD79972",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ATTACK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMON_ATTACK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMON_DEFENSE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMON_HEALTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMON_SPEED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFENSE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EPIC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EPIC_ATTACK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EPIC_DEFENSE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EPIC_HEALTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EPIC_SPEED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HEAD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HEALTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEGENDARY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEGENDARY_ATTACK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEGENDARY_DEFENSE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEGENDARY_HEALTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEGENDARY_SPEED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEGS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RARE_ATTACK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RARE_DEFENSE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RARE_HEALTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RARE_SPEED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPEED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEAPON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "cancelGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokens",
          "type": "uint256[]"
        }
      ],
      "name": "createGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "waitingForPlayers",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "finished",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "player1ResultSubmitted",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "player1Winner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "player2ResultSubmitted",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "player2Winner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joinGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedWallets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "mintCommonSet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintCredits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_seed",
          "type": "uint256"
        }
      ],
      "name": "mintRandomItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "player1ResultSubmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "player2ResultSubmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seed",
          "type": "uint256"
        }
      ],
      "name": "randomItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "resolveGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9b416397c6268e67670031befab8b278744543d81d25e47aa4b54216eb2fa9d0",
  "receipt": {
    "to": null,
    "from": "0xC6eA6418420016e4DfC10ce5A6a9FE39B16256E4",
    "contractAddress": "0x7BB43028DAbA56773861fBb71Bab114befD79972",
    "transactionIndex": 0,
    "gasUsed": "3269251",
    "logsBloom": "0x
    "blockHash": "0xcf13e599da6234f006bc049dfe9793e86bcec424c121a1d38c7491ac962a96b1",
    "transactionHash": "0x9b416397c6268e67670031befab8b278744543d81d25e47aa4b54216eb2fa9d0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5852314,
        "transactionHash": "0x9b416397c6268e67670031befab8b278744543d81d25e47aa4b54216eb2fa9d0",
        "address": "0x7BB43028DAbA56773861fBb71Bab114befD79972",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c6ea6418420016e4dfc10ce5a6a9fe39b16256e4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcf13e599da6234f006bc049dfe9793e86bcec424c121a1d38c7491ac962a96b1"
      }
    ],
    "blockNumber": 5852314,
    "cumulativeGasUsed": "3269251",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f6390afff7c1d5276aeb739cd7c280a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATTACK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMON_ATTACK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMON_DEFENSE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMON_HEALTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMON_SPEED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFENSE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPIC_ATTACK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPIC_DEFENSE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPIC_HEALTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPIC_SPEED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEALTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEGENDARY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEGENDARY_ATTACK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEGENDARY_DEFENSE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEGENDARY_HEALTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEGENDARY_SPEED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEGS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RARE_ATTACK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RARE_DEFENSE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RARE_HEALTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RARE_SPEED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPEED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEAPON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"cancelGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"waitingForPlayers\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"player1ResultSubmitted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"player1Winner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"player2ResultSubmitted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"player2Winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedWallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintCommonSet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"mintRandomItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"player1ResultSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"player2ResultSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"randomItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"resolveGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Web3Arena1155.sol\":\"Web3Arena1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xb11d1ade7146ac3da122e1f387ea82b0bd385d50823946c3f967dbffef3e9f4f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdad22b949de979bb2ad9001c044b2aeaacf8a25e3de09ed6f022a9469f936d5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Web3Arena1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Web3Arena1155 is ERC1155, ERC1155Burnable, ERC1155Pausable, Ownable {\\n    constructor() ERC1155(\\\"https://api.web3arena.com/api/v1/nft/{id}\\\") {}\\n\\n    // free mint credits for winning games\\n    mapping(address => uint256) public mintCredits;\\n\\n    struct Game {\\n        uint256 gameId;\\n        address creator;\\n        bool waitingForPlayers;\\n        address challenger;\\n        uint256[] playersTokens;\\n        address winner;\\n        bool finished;\\n        uint256 createdAt;\\n        bool player1ResultSubmitted;\\n        address player1Winner;\\n        bool player2ResultSubmitted;\\n        address player2Winner;\\n    }\\n    // store active and completed games\\n    mapping(uint256 => Game) public games;\\n\\n    // lock wallet address to prevent multiple games\\n    mapping(address => bool) public lockedWallets;\\n\\n    // Armor types\\n    uint256 public constant HEAD = 0;\\n    uint256 public constant CHEST = 1;\\n    uint256 public constant LEGS = 2;\\n    uint256 public constant WEAPON = 3;\\n\\n    // Armor rarity\\n    uint256 public constant COMMON = 0;\\n    uint256 public constant RARE = 1;\\n    uint256 public constant EPIC = 2;\\n    uint256 public constant LEGENDARY = 3;\\n\\n    // Armor stats\\n    uint256 public constant ATTACK = 0;\\n    uint256 public constant DEFENSE = 1;\\n    uint256 public constant SPEED = 2;\\n    uint256 public constant HEALTH = 3;\\n\\n    // Armor stats values\\n    uint256 public constant COMMON_ATTACK = 1;\\n    uint256 public constant COMMON_DEFENSE = 1;\\n    uint256 public constant COMMON_SPEED = 1;\\n    uint256 public constant COMMON_HEALTH = 1;\\n\\n    uint256 public constant RARE_ATTACK = 2;\\n    uint256 public constant RARE_DEFENSE = 2;\\n    uint256 public constant RARE_SPEED = 2;\\n    uint256 public constant RARE_HEALTH = 2;\\n\\n    uint256 public constant EPIC_ATTACK = 3;\\n    uint256 public constant EPIC_DEFENSE = 3;\\n    uint256 public constant EPIC_SPEED = 3;\\n    uint256 public constant EPIC_HEALTH = 3;\\n\\n    uint256 public constant LEGENDARY_ATTACK = 4;\\n    uint256 public constant LEGENDARY_DEFENSE = 4;\\n    uint256 public constant LEGENDARY_SPEED = 4;\\n    uint256 public constant LEGENDARY_HEALTH = 4;\\n\\n    // mint a commont set for a fixed price\\n\\n    function mintCommonSet(address _to) public payable {\\n        require(msg.value == 10 ether, \\\"Not enough ETH\\\");\\n        _mint(_to, HEAD, 1, \\\"\\\");\\n        _mint(_to, CHEST, 1, \\\"\\\");\\n        _mint(_to, LEGS, 1, \\\"\\\");\\n        _mint(_to, WEAPON, 1, \\\"\\\");\\n    }\\n\\n    // generate a pseudo random item with random rarity\\n\\n    function randomItem(uint256 _seed) public view returns (uint256) {\\n        uint256 rand = uint256(\\n            keccak256(abi.encodePacked(block.timestamp, _seed))\\n        );\\n        uint256 itemType = rand % 4;\\n        uint256 itemRarity = rand % 4;\\n        return itemType + itemRarity * 4;\\n    }\\n\\n    // mint a random item for a fixed price or using mint credits\\n\\n    function mintRandomItem(address _to, uint256 _seed) public payable {\\n        require(msg.value == 1 ether || mintCredits[_to] > 0, \\\"Not enough ETH\\\");\\n        if (mintCredits[_to] > 0) {\\n            mintCredits[_to] -= 1;\\n        }\\n        _mint(_to, randomItem(_seed), 1, \\\"\\\");\\n    }\\n\\n    // create game which takes users tokens and locks them during the game\\n\\n    function createGame(uint256[] memory _tokens) public {\\n        require(!lockedWallets[msg.sender], \\\"Wallet is locked\\\");\\n        require(_tokens.length == 4, \\\"Invalid tokens\\\");\\n        uint256 gameId = uint256(\\n            keccak256(abi.encodePacked(block.timestamp, msg.sender))\\n        );\\n        games[gameId] = Game({\\n            gameId: gameId,\\n            creator: msg.sender,\\n            waitingForPlayers: true,\\n            challenger: address(0),\\n            playersTokens: _tokens,\\n            winner: address(0),\\n            finished: false,\\n            createdAt: block.timestamp,\\n            player1ResultSubmitted: false,\\n            player1Winner: address(0),\\n            player2ResultSubmitted: false,\\n            player2Winner: address(0)\\n        });\\n        lockedWallets[msg.sender] = true;\\n    }\\n\\n    // join an existing game which takes users tokens and locks them during the game\\n\\n    function joinGame() public payable {\\n        require(msg.value == 1 ether, \\\"Not enough ETH\\\");\\n        require(!lockedWallets[msg.sender], \\\"Wallet is locked\\\");\\n        require(\\n            balanceOf(msg.sender, HEAD) >= 1 &&\\n                balanceOf(msg.sender, CHEST) >= 1 &&\\n                balanceOf(msg.sender, LEGS) >= 1 &&\\n                balanceOf(msg.sender, WEAPON) >= 1,\\n            \\\"Not enough tokens\\\"\\n        );\\n        uint256 gameId = uint256(\\n            keccak256(abi.encodePacked(block.timestamp, msg.sender))\\n        );\\n        require(games[gameId].waitingForPlayers, \\\"Game not found\\\");\\n        lockedWallets[msg.sender] = true;\\n        games[gameId].challenger = msg.sender;\\n        games[gameId].waitingForPlayers = false;\\n    }\\n\\n    // resolve game which takes the winner and loser and distributes the tokens to the winner and burns the losers tokens, can only resolve if both players have submitted their results or 1 day has passed has passed from a single submission\\n    // if no submission has been made the game is cancelled and tokens are returned to the players\\n\\n    function resolveGame(uint256 gameId) public {\\n        require(games[gameId].finished, \\\"Game not finished\\\");\\n        require(\\n            games[gameId].player1ResultSubmitted &&\\n                games[gameId].player2ResultSubmitted,\\n            \\\"Both players must submit results\\\"\\n        );\\n        require(\\n            games[gameId].player1Winner == games[gameId].creator ||\\n                games[gameId].player2Winner == games[gameId].creator,\\n            \\\"You are not the winner\\\"\\n        );\\n        require(\\n            games[gameId].player1Winner == games[gameId].challenger ||\\n                games[gameId].player2Winner == games[gameId].challenger,\\n            \\\"You are not the winner\\\"\\n        );\\n        if (games[gameId].player1Winner == games[gameId].creator) {\\n            _safeBatchTransferFrom(\\n                games[gameId].creator,\\n                games[gameId].challenger,\\n                games[gameId].playersTokens,\\n                new uint256[](4),\\n                \\\"\\\"\\n            );\\n        } else {\\n            _safeBatchTransferFrom(\\n                games[gameId].challenger,\\n                games[gameId].creator,\\n                games[gameId].playersTokens,\\n                new uint256[](4),\\n                \\\"\\\"\\n            );\\n        }\\n        lockedWallets[games[gameId].creator] = false;\\n        lockedWallets[games[gameId].challenger] = false;\\n        _burnBatch(\\n            games[gameId].creator,\\n            games[gameId].playersTokens,\\n            new uint256[](4)\\n        );\\n        _burnBatch(\\n            games[gameId].challenger,\\n            games[gameId].playersTokens,\\n            new uint256[](4)\\n        );\\n    }\\n\\n    // player 1 result submission, true if won, false if lost\\n\\n    function player1ResultSubmission(bool _result, uint256 gameId) public {\\n        require(games[gameId].creator == msg.sender, \\\"You are not the creator\\\");\\n        require(\\n            !games[gameId].player1ResultSubmitted,\\n            \\\"Result already submitted\\\"\\n        );\\n        games[gameId].player1ResultSubmitted = true;\\n        if (_result) {\\n            games[gameId].player1Winner = games[gameId].creator;\\n        } else {\\n            games[gameId].player1Winner = games[gameId].challenger;\\n        }\\n        if (games[gameId].player2ResultSubmitted) {\\n            games[gameId].finished = true;\\n        }\\n    }\\n\\n    // player 2 result submission, true if won, false if lost\\n\\n    function player2ResultSubmission(bool _result, uint256 gameId) public {\\n        require(!games[gameId].finished, \\\"Game is finished\\\");\\n        require(\\n            games[gameId].challenger == msg.sender,\\n            \\\"Only challenger can submit result\\\"\\n        );\\n        require(\\n            !games[gameId].player2ResultSubmitted,\\n            \\\"Result already submitted\\\"\\n        );\\n        games[gameId].player2ResultSubmitted = true;\\n        if (_result) {\\n            games[gameId].player2Winner = msg.sender;\\n        } else {\\n            games[gameId].player2Winner = games[gameId].creator;\\n        }\\n        if (games[gameId].player1ResultSubmitted) {\\n            resolveGame(gameId);\\n        }\\n    }\\n\\n    // cancel game unlocks back the tokens\\n\\n    function cancelGame(uint256 _gameId) public {\\n        require(\\n            games[_gameId].creator == msg.sender ||\\n                games[_gameId].challenger == msg.sender,\\n            \\\"Not your game\\\"\\n        );\\n        require(\\n            games[_gameId].createdAt + 1 days < block.timestamp,\\n            \\\"Game not finished\\\"\\n        );\\n        require(!games[_gameId].finished, \\\"Game already finished\\\");\\n        _safeBatchTransferFrom(\\n            games[_gameId].creator,\\n            msg.sender,\\n            games[_gameId].playersTokens,\\n            new uint256[](4),\\n            \\\"\\\"\\n        );\\n        _safeBatchTransferFrom(\\n            games[_gameId].challenger,\\n            msg.sender,\\n            games[_gameId].playersTokens,\\n            new uint256[](4),\\n            \\\"\\\"\\n        );\\n        lockedWallets[games[_gameId].creator] = false;\\n        lockedWallets[games[_gameId].challenger] = false;\\n        games[_gameId].finished = true;\\n    }\\n\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public onlyOwner {\\n        _mint(account, id, amount, data);\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public onlyOwner {\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155, ERC1155Pausable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x711c5848b924afccab9e2d0d19002a79c2cb4a5c81d2608beeedeba29b399086\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405180606001604052806029815260200162003aa260299139620000378162000053565b506003805460ff191690556200004d3362000065565b62000230565b600262000061828262000164565b5050565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000ea57607f821691505b6020821081036200010b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200015f57600081815260208120601f850160051c810160208610156200013a5750805b601f850160051c820191505b818110156200015b5782815560010162000146565b5050505b505050565b81516001600160401b03811115620001805762000180620000bf565b6200019881620001918454620000d5565b8462000111565b602080601f831160018114620001d05760008415620001b75750858301515b600019600386901b1c1916600185901b1785556200015b565b600085815260208120601f198616915b828110156200020157888601518255948401946001909101908401620001e0565b5085821015620002205787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61386280620002406000396000f3fe6080604052600436106103805760003560e01c806379e74350116101d1578063c757e6fe11610102578063ec55631b116100a0578063f5298aca1161006f578063f5298aca146108a4578063f592bd90146103e8578063f6f75f6b146105f6578063fd67c890146103e857600080fd5b8063ec55631b146105ac578063ed3180cb146105ac578063f242432a14610864578063f2fde38b1461088457600080fd5b8063e140d1e1116100dc578063e140d1e1146103fd578063e41473ea146103e8578063e985e9c5146107fb578063ebfb39771461084457600080fd5b8063c757e6fe146107c6578063d4f77b1c146107f3578063dc8ebcd2146103fd57600080fd5b806398a4d27e1161016f578063a46350e111610149578063a46350e114610773578063a86debc5146105ac578063b7a5a5b614610793578063c65d1e9d146107b357600080fd5b806398a4d27e146103fd5780639ad68466146105f6578063a22cb4651461075357600080fd5b80638467db1c116101ab5780638467db1c146105f65780638da5cb5b146106da5780639533d8d41461071057806397b450281461074057600080fd5b806379e74350146103fd578063816171c0146103e85780638456cb59146106c557600080fd5b8063338ea031116102b65780635c975abb116102545780636cd7d316116102235780636cd7d316146105f6578063715018a61461069057806372c6e905146105f6578063731133e9146106a557600080fd5b80635c975abb14610638578063619f7b3c146103fd57806369958ab9146106505780636b20c4541461067057600080fd5b806346e6a86c1161029057806346e6a86c14610412578063486daf21146103e85780634c64b504146105f65780634e1273f41461060b57600080fd5b8063338ea031146103fd5780633f4ba83a146105e15780633f730887146105f657600080fd5b806316fa51231161032357806320ab9223116102fd57806320ab9223146103e8578063259b88eb1461058c5780632ab697d9146105ac5780632eb2c2d6146105c157600080fd5b806316fa51231461054a5780631a701609146104125780631f7fdffa1461056c57600080fd5b8063094679bc1161035f578063094679bc146103fd5780630bf8ca36146104125780630e89341c14610427578063117a5b901461045457600080fd5b8062fdd58e1461038557806301ffc9a7146103b8578063021dcb7d146103e8575b600080fd5b34801561039157600080fd5b506103a56103a0366004612ca5565b6108c4565b6040519081526020015b60405180910390f35b3480156103c457600080fd5b506103d86103d3366004612ce5565b61095d565b60405190151581526020016103af565b3480156103f457600080fd5b506103a5600181565b34801561040957600080fd5b506103a5600381565b34801561041e57600080fd5b506103a5600081565b34801561043357600080fd5b50610447610442366004612d09565b6109ad565b6040516103af9190612d68565b34801561046057600080fd5b506104e561046f366004612d09565b6005602081905260009182526040909120805460018201546002830154600484015494840154600685015460079095015493956001600160a01b038085169660ff600160a01b968790048116979583169684841696940481169493828216936101008404811693600160a81b900490921691168b565b604080519b8c526001600160a01b039a8b1660208d0152981515988b019890985295881660608a0152938716608089015291151560a088015260c0870152151560e08601528316610100850152151561012084015216610140820152610160016103af565b34801561055657600080fd5b5061056a610565366004612e53565b610a41565b005b34801561057857600080fd5b5061056a610587366004612f04565b610cc1565b34801561059857600080fd5b5061056a6105a7366004612fad565b610cdb565b3480156105b857600080fd5b506103a5600481565b3480156105cd57600080fd5b5061056a6105dc366004612fc9565b610e89565b3480156105ed57600080fd5b5061056a610ed5565b34801561060257600080fd5b506103a5600281565b34801561061757600080fd5b5061062b610626366004613073565b610ee7565b6040516103af9190613179565b34801561064457600080fd5b5060035460ff166103d8565b34801561065c57600080fd5b5061056a61066b366004612d09565b611011565b34801561067c57600080fd5b5061056a61068b36600461318c565b6112f3565b34801561069c57600080fd5b5061056a61133b565b3480156106b157600080fd5b5061056a6106c0366004613200565b61134d565b3480156106d157600080fd5b5061056a611361565b3480156106e657600080fd5b5060035461010090046001600160a01b03166040516001600160a01b0390911681526020016103af565b34801561071c57600080fd5b506103d861072b366004613255565b60066020526000908152604090205460ff1681565b61056a61074e366004613255565b611371565b34801561075f57600080fd5b5061056a61076e366004613270565b61140e565b34801561077f57600080fd5b5061056a61078e366004612fad565b611419565b34801561079f57600080fd5b5061056a6107ae366004612d09565b6115ef565b61056a6107c1366004612ca5565b611aa3565b3480156107d257600080fd5b506103a56107e1366004613255565b60046020526000908152604090205481565b61056a611b5d565b34801561080757600080fd5b506103d86108163660046132a3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561085057600080fd5b506103a561085f366004612d09565b611d5b565b34801561087057600080fd5b5061056a61087f3660046132cd565b611dc3565b34801561089057600080fd5b5061056a61089f366004613255565b611e08565b3480156108b057600080fd5b5061056a6108bf366004613332565b611e7e565b60006001600160a01b0383166109345760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061098e57506001600160e01b031982166303a24d0760e21b145b8061095757506301ffc9a760e01b6001600160e01b0319831614610957565b6060600280546109bc90613365565b80601f01602080910402602001604051908101604052809291908181526020018280546109e890613365565b8015610a355780601f10610a0a57610100808354040283529160200191610a35565b820191906000526020600020905b815481529060010190602001808311610a1857829003601f168201915b50505050509050919050565b3360009081526006602052604090205460ff1615610a945760405162461bcd60e51b815260206004820152601060248201526f15d85b1b195d081a5cc81b1bd8dad95960821b604482015260640161092b565b8051600414610ad65760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420746f6b656e7360901b604482015260640161092b565b60004233604051602001610b0692919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60408051601f19818403018152828252805160209182012061018084018352808452338483019081526001858501818152600060608801818152608089018b815260a08a0183905260c08a018390524260e08b01526101008a018390526101208a018390526101408a018390526101608a018390528683526005885297909120885181559351928401805492511515600160a01b026001600160a81b03199093166001600160a01b03948516179290921790915551600283018054919092166001600160a01b03199190911617905592518051919550610bed926003850192910190612c29565b5060a082015160048201805460c08501516001600160a01b039384166001600160a81b031992831617600160a01b911515919091021790915560e0840151600584015561010080850151600680860180546101208901516101408a015191909616931515610100600160a81b031916939093179486169093029390931760ff60a81b1916600160a81b9115159190910217905561016090930151600790920180546001600160a01b0319169290911691909117905533600090815260209190915260409020805460ff191660011790555050565b610cc9611ec1565b610cd584848484611f21565b50505050565b6000818152600560205260409020600101546001600160a01b03163314610d445760405162461bcd60e51b815260206004820152601760248201527f596f7520617265206e6f74207468652063726561746f72000000000000000000604482015260640161092b565b60008181526005602052604090206006015460ff1615610da15760405162461bcd60e51b815260206004820152601860248201527714995cdd5b1d08185b1c9958591e481cdd589b5a5d1d195960421b604482015260640161092b565b6000818152600560205260409020600601805460ff191660011790558115610e045760008181526005602052604090206001810154600690910180546001600160a01b0390921661010002610100600160a81b0319909216919091179055610e41565b60008181526005602052604090206002810154600690910180546001600160a01b0390921661010002610100600160a81b03199092169190911790555b600081815260056020526040902060060154600160a81b900460ff1615610e85576000818152600560205260409020600401805460ff60a01b1916600160a01b1790555b5050565b6001600160a01b038516331480610ea55750610ea58533610816565b610ec15760405162461bcd60e51b815260040161092b9061339f565b610ece858585858561207b565b5050505050565b610edd611ec1565b610ee5612225565b565b60608151835114610f4c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161092b565b6000835167ffffffffffffffff811115610f6857610f68612d7b565b604051908082528060200260200182016040528015610f91578160200160208202803683370190505b50905060005b845181101561100957610fdc858281518110610fb557610fb56133ee565b6020026020010151858381518110610fcf57610fcf6133ee565b60200260200101516108c4565b828281518110610fee57610fee6133ee565b60209081029190910101526110028161341a565b9050610f97565b509392505050565b6000818152600560205260409020600101546001600160a01b031633148061105257506000818152600560205260409020600201546001600160a01b031633145b61108e5760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420796f75722067616d6560981b604482015260640161092b565b6000818152600560208190526040909120015442906110b09062015180613433565b106110f15760405162461bcd60e51b815260206004820152601160248201527011d85b59481b9bdd08199a5b9a5cda1959607a1b604482015260640161092b565b600081815260056020526040902060040154600160a01b900460ff16156111525760405162461bcd60e51b815260206004820152601560248201527411d85b5948185b1c9958591e48199a5b9a5cda1959605a1b604482015260640161092b565b600081815260056020908152604091829020600181015460039091018054845181850281018501909552808552611210946001600160a01b039093169333939291908301828280156111c357602002820191906000526020600020905b8154815260200190600101908083116111af575b50600493506111d192505050565b6040519080825280602002602001820160405280156111fa578160200160208202803683370190505b506040518060200160405280600081525061207b565b60008181526005602090815260409182902060028101546003909101805484518185028101850190955280855261128d946001600160a01b039093169333939291908301828280156111c357602002820191906000526020600020908154815260200190600101908083116111af5750600493506111d192505050565b600081815260056020818152604080842060018101546001600160a01b03908116865260068452828620805460ff19908116909155600283015490911686529185208054909216909155939092529052600401805460ff60a01b1916600160a01b179055565b6001600160a01b03831633148061130f575061130f8333610816565b61132b5760405162461bcd60e51b815260040161092b9061339f565b611336838383612277565b505050565b611343611ec1565b610ee56000612413565b611355611ec1565b610cd58484848461246d565b611369611ec1565b610ee5612556565b34678ac7230489e80000146113985760405162461bcd60e51b815260040161092b90613446565b6113b581600060016040518060200160405280600081525061246d565b6113d1816001806040518060200160405280600081525061246d565b6113ee81600260016040518060200160405280600081525061246d565b61140b81600360016040518060200160405280600081525061246d565b50565b610e85338383612593565b600081815260056020526040902060040154600160a01b900460ff16156114755760405162461bcd60e51b815260206004820152601060248201526f11d85b59481a5cc8199a5b9a5cda195960821b604482015260640161092b565b6000818152600560205260409020600201546001600160a01b031633146114e85760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206368616c6c656e6765722063616e207375626d697420726573756c6044820152601d60fa1b606482015260840161092b565b600081815260056020526040902060060154600160a81b900460ff161561154c5760405162461bcd60e51b815260206004820152601860248201527714995cdd5b1d08185b1c9958591e481cdd589b5a5d1d195960421b604482015260640161092b565b6000818152600560205260409020600601805460ff60a81b1916600160a81b179055811561159a57600081815260056020526040902060070180546001600160a01b031916331790556115d0565b60008181526005602052604090206001810154600790910180546001600160a01b0319166001600160a01b039092169190911790555b60008181526005602052604090206006015460ff1615610e8557610e85815b600081815260056020526040902060040154600160a01b900460ff1661164b5760405162461bcd60e51b815260206004820152601160248201527011d85b59481b9bdd08199a5b9a5cda1959607a1b604482015260640161092b565b60008181526005602052604090206006015460ff1680156116845750600081815260056020526040902060060154600160a81b900460ff165b6116d05760405162461bcd60e51b815260206004820181905260248201527f426f746820706c6179657273206d757374207375626d697420726573756c7473604482015260640161092b565b6000818152600560205260409020600181015460069091015461010090046001600160a01b039081169116148061172a5750600081815260056020526040902060018101546007909101546001600160a01b039081169116145b61176f5760405162461bcd60e51b81526020600482015260166024820152752cb7ba9030b932903737ba103a3432903bb4b73732b960511b604482015260640161092b565b6000818152600560205260409020600281015460069091015461010090046001600160a01b03908116911614806117c95750600081815260056020526040902060028101546007909101546001600160a01b039081169116145b61180e5760405162461bcd60e51b81526020600482015260166024820152752cb7ba9030b932903737ba103a3432903bb4b73732b960511b604482015260640161092b565b600081815260056020526040902060018101546006909101546001600160a01b03918216610100909104909116036118c75760008181526005602090815260409182902060018101546002820154600390920180548551818602810186019096528086526118c2956001600160a01b039384169594909316938301828280156111c357602002820191906000526020600020908154815260200190600101908083116111af5750600493506111d192505050565b611949565b6000818152600560209081526040918290206002810154600182015460039092018054855181860281018601909652808652611949956001600160a01b039384169594909316938301828280156111c357602002820191906000526020600020908154815260200190600101908083116111af5750600493506111d192505050565b60008181526005602081815260408084206001810180546001600160a01b03908116875260068552838720805460ff199081169091556002840154821688528488208054909116905595879052938352925460039093018054825181850281018501909352808352611a2b95949094169391929091908301828280156119ee57602002820191906000526020600020905b8154815260200190600101908083116119da575b50600493506119fc92505050565b604051908082528060200260200182016040528015611a25578160200160208202803683370190505b50612277565b60008181526005602090815260409182902060028101546003909101805484518185028101850190955280855261140b946001600160a01b03909316938301828280156119ee57602002820191906000526020600020908154815260200190600101908083116119da5750600493506119fc92505050565b34670de0b6b3a76400001480611ad057506001600160a01b03821660009081526004602052604090205415155b611aec5760405162461bcd60e51b815260040161092b90613446565b6001600160a01b03821660009081526004602052604090205415611b39576001600160a01b0382166000908152600460205260408120805460019290611b3390849061346e565b90915550505b610e8582611b4683611d5b565b60016040518060200160405280600081525061246d565b34670de0b6b3a764000014611b845760405162461bcd60e51b815260040161092b90613446565b3360009081526006602052604090205460ff1615611bd75760405162461bcd60e51b815260206004820152601060248201526f15d85b1b195d081a5cc81b1bd8dad95960821b604482015260640161092b565b6001611be43360006108c4565b10158015611bfd57506001611bfa3360016108c4565b10155b8015611c1457506001611c113360026108c4565b10155b8015611c2b57506001611c283360036108c4565b10155b611c6b5760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820746f6b656e7360781b604482015260640161092b565b60004233604051602001611c9b92919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60408051808303601f19018152918152815160209283012060008181526005909352912060010154909150600160a01b900460ff16611d0d5760405162461bcd60e51b815260206004820152600e60248201526d11d85b59481b9bdd08199bdd5b9960921b604482015260640161092b565b336000818152600660209081526040808320805460ff19166001908117909155948352600590915290206002810180546001600160a01b03191690921790915501805460ff60a01b19169055565b60408051426020808301919091528183018490528251808303840181526060909201909252805191012060009081611d94600483613481565b90506000611da3600484613481565b9050611db08160046134a3565b611dba9083613433565b95945050505050565b6001600160a01b038516331480611ddf5750611ddf8533610816565b611dfb5760405162461bcd60e51b815260040161092b9061339f565b610ece8585858585612673565b611e10611ec1565b6001600160a01b038116611e755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161092b565b61140b81612413565b6001600160a01b038316331480611e9a5750611e9a8333610816565b611eb65760405162461bcd60e51b815260040161092b9061339f565b6113368383836127ab565b6003546001600160a01b03610100909104163314610ee55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161092b565b6001600160a01b038416611f475760405162461bcd60e51b815260040161092b906134ba565b8151835114611f685760405162461bcd60e51b815260040161092b906134fb565b33611f78816000878787876128c3565b60005b845181101561201357838181518110611f9657611f966133ee565b6020026020010151600080878481518110611fb357611fb36133ee565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611ffb9190613433565b9091555081905061200b8161341a565b915050611f7b565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612064929190613543565b60405180910390a4610ece816000878787876128d1565b815183511461209c5760405162461bcd60e51b815260040161092b906134fb565b6001600160a01b0384166120c25760405162461bcd60e51b815260040161092b90613568565b336120d18187878787876128c3565b60005b84518110156121b75760008582815181106120f1576120f16133ee565b60200260200101519050600085838151811061210f5761210f6133ee565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561215f5760405162461bcd60e51b815260040161092b906135ad565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061219c908490613433565b92505081905550505050806121b09061341a565b90506120d4565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612207929190613543565b60405180910390a461221d8187878787876128d1565b505050505050565b61222d612a2c565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03831661229d5760405162461bcd60e51b815260040161092b906135f7565b80518251146122be5760405162461bcd60e51b815260040161092b906134fb565b60003390506122e1818560008686604051806020016040528060008152506128c3565b60005b83518110156123a6576000848281518110612301576123016133ee565b60200260200101519050600084838151811061231f5761231f6133ee565b602090810291909101810151600084815280835260408082206001600160a01b038c16835290935291909120549091508181101561236f5760405162461bcd60e51b815260040161092b9061363a565b6000928352602083815260408085206001600160a01b038b168652909152909220910390558061239e8161341a565b9150506122e4565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516123f7929190613543565b60405180910390a4604080516020810190915260009052610cd5565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166124935760405162461bcd60e51b815260040161092b906134ba565b33600061249f85612a75565b905060006124ac85612a75565b90506124bd836000898585896128c3565b6000868152602081815260408083206001600160a01b038b168452909152812080548792906124ed908490613433565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461254d83600089898989612ac0565b50505050505050565b61255e612b7b565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861225a3390565b816001600160a01b0316836001600160a01b0316036126065760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161092b565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166126995760405162461bcd60e51b815260040161092b90613568565b3360006126a585612a75565b905060006126b285612a75565b90506126c28389898585896128c3565b6000868152602081815260408083206001600160a01b038c168452909152902054858110156127035760405162461bcd60e51b815260040161092b906135ad565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612740908490613433565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46127a0848a8a8a8a8a612ac0565b505050505050505050565b6001600160a01b0383166127d15760405162461bcd60e51b815260040161092b906135f7565b3360006127dd84612a75565b905060006127ea84612a75565b905061280a838760008585604051806020016040528060008152506128c3565b6000858152602081815260408083206001600160a01b038a1684529091529020548481101561284b5760405162461bcd60e51b815260040161092b9061363a565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a460408051602081019091526000905261254d565b61221d868686868686612bc1565b6001600160a01b0384163b1561221d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612915908990899088908890889060040161367e565b6020604051808303816000875af1925050508015612950575060408051601f3d908101601f1916820190925261294d918101906136dc565b60015b6129fc5761295c6136f9565b806308c379a0036129955750612970613715565b8061297b5750612997565b8060405162461bcd60e51b815260040161092b9190612d68565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161092b565b6001600160e01b0319811663bc197c8160e01b1461254d5760405162461bcd60e51b815260040161092b9061379f565b60035460ff16610ee55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161092b565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612aaf57612aaf6133ee565b602090810291909101015292915050565b6001600160a01b0384163b1561221d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612b0490899089908890889088906004016137e7565b6020604051808303816000875af1925050508015612b3f575060408051601f3d908101601f19168201909252612b3c918101906136dc565b60015b612b4b5761295c6136f9565b6001600160e01b0319811663f23a6e6160e01b1461254d5760405162461bcd60e51b815260040161092b9061379f565b60035460ff1615610ee55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161092b565b60035460ff161561221d5760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b606482015260840161092b565b828054828255906000526020600020908101928215612c64579160200282015b82811115612c64578251825591602001919060010190612c49565b50612c70929150612c74565b5090565b5b80821115612c705760008155600101612c75565b80356001600160a01b0381168114612ca057600080fd5b919050565b60008060408385031215612cb857600080fd5b612cc183612c89565b946020939093013593505050565b6001600160e01b03198116811461140b57600080fd5b600060208284031215612cf757600080fd5b8135612d0281612ccf565b9392505050565b600060208284031215612d1b57600080fd5b5035919050565b6000815180845260005b81811015612d4857602081850181015186830182015201612d2c565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000612d026020830184612d22565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612db757612db7612d7b565b6040525050565b600067ffffffffffffffff821115612dd857612dd8612d7b565b5060051b60200190565b600082601f830112612df357600080fd5b81356020612e0082612dbe565b604051612e0d8282612d91565b83815260059390931b8501820192828101915086841115612e2d57600080fd5b8286015b84811015612e485780358352918301918301612e31565b509695505050505050565b600060208284031215612e6557600080fd5b813567ffffffffffffffff811115612e7c57600080fd5b612e8884828501612de2565b949350505050565b600082601f830112612ea157600080fd5b813567ffffffffffffffff811115612ebb57612ebb612d7b565b604051612ed2601f8301601f191660200182612d91565b818152846020838601011115612ee757600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612f1a57600080fd5b612f2385612c89565b9350602085013567ffffffffffffffff80821115612f4057600080fd5b612f4c88838901612de2565b94506040870135915080821115612f6257600080fd5b612f6e88838901612de2565b93506060870135915080821115612f8457600080fd5b50612f9187828801612e90565b91505092959194509250565b80358015158114612ca057600080fd5b60008060408385031215612fc057600080fd5b612cc183612f9d565b600080600080600060a08688031215612fe157600080fd5b612fea86612c89565b9450612ff860208701612c89565b9350604086013567ffffffffffffffff8082111561301557600080fd5b61302189838a01612de2565b9450606088013591508082111561303757600080fd5b61304389838a01612de2565b9350608088013591508082111561305957600080fd5b5061306688828901612e90565b9150509295509295909350565b6000806040838503121561308657600080fd5b823567ffffffffffffffff8082111561309e57600080fd5b818501915085601f8301126130b257600080fd5b813560206130bf82612dbe565b6040516130cc8282612d91565b83815260059390931b85018201928281019150898411156130ec57600080fd5b948201945b838610156131115761310286612c89565b825294820194908201906130f1565b9650508601359250508082111561312757600080fd5b5061313485828601612de2565b9150509250929050565b600081518084526020808501945080840160005b8381101561316e57815187529582019590820190600101613152565b509495945050505050565b602081526000612d02602083018461313e565b6000806000606084860312156131a157600080fd5b6131aa84612c89565b9250602084013567ffffffffffffffff808211156131c757600080fd5b6131d387838801612de2565b935060408601359150808211156131e957600080fd5b506131f686828701612de2565b9150509250925092565b6000806000806080858703121561321657600080fd5b61321f85612c89565b93506020850135925060408501359150606085013567ffffffffffffffff81111561324957600080fd5b612f9187828801612e90565b60006020828403121561326757600080fd5b612d0282612c89565b6000806040838503121561328357600080fd5b61328c83612c89565b915061329a60208401612f9d565b90509250929050565b600080604083850312156132b657600080fd5b6132bf83612c89565b915061329a60208401612c89565b600080600080600060a086880312156132e557600080fd5b6132ee86612c89565b94506132fc60208701612c89565b93506040860135925060608601359150608086013567ffffffffffffffff81111561332657600080fd5b61306688828901612e90565b60008060006060848603121561334757600080fd5b61335084612c89565b95602085013595506040909401359392505050565b600181811c9082168061337957607f821691505b60208210810361339957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161342c5761342c613404565b5060010190565b8082018082111561095757610957613404565b6020808252600e908201526d09cdee840cadcdeeaced0408aa8960931b604082015260600190565b8181038181111561095757610957613404565b60008261349e57634e487b7160e01b600052601260045260246000fd5b500690565b808202811582820484141761095757610957613404565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b604081526000613556604083018561313e565b8281036020840152611dba818561313e565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906136aa9083018661313e565b82810360608401526136bc818661313e565b905082810360808401526136d08185612d22565b98975050505050505050565b6000602082840312156136ee57600080fd5b8151612d0281612ccf565b600060033d11156137125760046000803e5060005160e01c5b90565b600060443d10156137235790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561375357505050505090565b828501915081518181111561376b5750505050505090565b843d87010160208285010111156137855750505050505090565b61379460208286010187612d91565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061382190830184612d22565b97965050505050505056fea2646970667358221220b3721564e0428a394fbccbe1016952e14c18e46ea247b2ba50f2ac5c93b3630864736f6c6343000811003368747470733a2f2f6170692e776562336172656e612e636f6d2f6170692f76312f6e66742f7b69647d",
  "deployedBytecode": "0x6080604052600436106103805760003560e01c806379e74350116101d1578063c757e6fe11610102578063ec55631b116100a0578063f5298aca1161006f578063f5298aca146108a4578063f592bd90146103e8578063f6f75f6b146105f6578063fd67c890146103e857600080fd5b8063ec55631b146105ac578063ed3180cb146105ac578063f242432a14610864578063f2fde38b1461088457600080fd5b8063e140d1e1116100dc578063e140d1e1146103fd578063e41473ea146103e8578063e985e9c5146107fb578063ebfb39771461084457600080fd5b8063c757e6fe146107c6578063d4f77b1c146107f3578063dc8ebcd2146103fd57600080fd5b806398a4d27e1161016f578063a46350e111610149578063a46350e114610773578063a86debc5146105ac578063b7a5a5b614610793578063c65d1e9d146107b357600080fd5b806398a4d27e146103fd5780639ad68466146105f6578063a22cb4651461075357600080fd5b80638467db1c116101ab5780638467db1c146105f65780638da5cb5b146106da5780639533d8d41461071057806397b450281461074057600080fd5b806379e74350146103fd578063816171c0146103e85780638456cb59146106c557600080fd5b8063338ea031116102b65780635c975abb116102545780636cd7d316116102235780636cd7d316146105f6578063715018a61461069057806372c6e905146105f6578063731133e9146106a557600080fd5b80635c975abb14610638578063619f7b3c146103fd57806369958ab9146106505780636b20c4541461067057600080fd5b806346e6a86c1161029057806346e6a86c14610412578063486daf21146103e85780634c64b504146105f65780634e1273f41461060b57600080fd5b8063338ea031146103fd5780633f4ba83a146105e15780633f730887146105f657600080fd5b806316fa51231161032357806320ab9223116102fd57806320ab9223146103e8578063259b88eb1461058c5780632ab697d9146105ac5780632eb2c2d6146105c157600080fd5b806316fa51231461054a5780631a701609146104125780631f7fdffa1461056c57600080fd5b8063094679bc1161035f578063094679bc146103fd5780630bf8ca36146104125780630e89341c14610427578063117a5b901461045457600080fd5b8062fdd58e1461038557806301ffc9a7146103b8578063021dcb7d146103e8575b600080fd5b34801561039157600080fd5b506103a56103a0366004612ca5565b6108c4565b6040519081526020015b60405180910390f35b3480156103c457600080fd5b506103d86103d3366004612ce5565b61095d565b60405190151581526020016103af565b3480156103f457600080fd5b506103a5600181565b34801561040957600080fd5b506103a5600381565b34801561041e57600080fd5b506103a5600081565b34801561043357600080fd5b50610447610442366004612d09565b6109ad565b6040516103af9190612d68565b34801561046057600080fd5b506104e561046f366004612d09565b6005602081905260009182526040909120805460018201546002830154600484015494840154600685015460079095015493956001600160a01b038085169660ff600160a01b968790048116979583169684841696940481169493828216936101008404811693600160a81b900490921691168b565b604080519b8c526001600160a01b039a8b1660208d0152981515988b019890985295881660608a0152938716608089015291151560a088015260c0870152151560e08601528316610100850152151561012084015216610140820152610160016103af565b34801561055657600080fd5b5061056a610565366004612e53565b610a41565b005b34801561057857600080fd5b5061056a610587366004612f04565b610cc1565b34801561059857600080fd5b5061056a6105a7366004612fad565b610cdb565b3480156105b857600080fd5b506103a5600481565b3480156105cd57600080fd5b5061056a6105dc366004612fc9565b610e89565b3480156105ed57600080fd5b5061056a610ed5565b34801561060257600080fd5b506103a5600281565b34801561061757600080fd5b5061062b610626366004613073565b610ee7565b6040516103af9190613179565b34801561064457600080fd5b5060035460ff166103d8565b34801561065c57600080fd5b5061056a61066b366004612d09565b611011565b34801561067c57600080fd5b5061056a61068b36600461318c565b6112f3565b34801561069c57600080fd5b5061056a61133b565b3480156106b157600080fd5b5061056a6106c0366004613200565b61134d565b3480156106d157600080fd5b5061056a611361565b3480156106e657600080fd5b5060035461010090046001600160a01b03166040516001600160a01b0390911681526020016103af565b34801561071c57600080fd5b506103d861072b366004613255565b60066020526000908152604090205460ff1681565b61056a61074e366004613255565b611371565b34801561075f57600080fd5b5061056a61076e366004613270565b61140e565b34801561077f57600080fd5b5061056a61078e366004612fad565b611419565b34801561079f57600080fd5b5061056a6107ae366004612d09565b6115ef565b61056a6107c1366004612ca5565b611aa3565b3480156107d257600080fd5b506103a56107e1366004613255565b60046020526000908152604090205481565b61056a611b5d565b34801561080757600080fd5b506103d86108163660046132a3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561085057600080fd5b506103a561085f366004612d09565b611d5b565b34801561087057600080fd5b5061056a61087f3660046132cd565b611dc3565b34801561089057600080fd5b5061056a61089f366004613255565b611e08565b3480156108b057600080fd5b5061056a6108bf366004613332565b611e7e565b60006001600160a01b0383166109345760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061098e57506001600160e01b031982166303a24d0760e21b145b8061095757506301ffc9a760e01b6001600160e01b0319831614610957565b6060600280546109bc90613365565b80601f01602080910402602001604051908101604052809291908181526020018280546109e890613365565b8015610a355780601f10610a0a57610100808354040283529160200191610a35565b820191906000526020600020905b815481529060010190602001808311610a1857829003601f168201915b50505050509050919050565b3360009081526006602052604090205460ff1615610a945760405162461bcd60e51b815260206004820152601060248201526f15d85b1b195d081a5cc81b1bd8dad95960821b604482015260640161092b565b8051600414610ad65760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420746f6b656e7360901b604482015260640161092b565b60004233604051602001610b0692919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60408051601f19818403018152828252805160209182012061018084018352808452338483019081526001858501818152600060608801818152608089018b815260a08a0183905260c08a018390524260e08b01526101008a018390526101208a018390526101408a018390526101608a018390528683526005885297909120885181559351928401805492511515600160a01b026001600160a81b03199093166001600160a01b03948516179290921790915551600283018054919092166001600160a01b03199190911617905592518051919550610bed926003850192910190612c29565b5060a082015160048201805460c08501516001600160a01b039384166001600160a81b031992831617600160a01b911515919091021790915560e0840151600584015561010080850151600680860180546101208901516101408a015191909616931515610100600160a81b031916939093179486169093029390931760ff60a81b1916600160a81b9115159190910217905561016090930151600790920180546001600160a01b0319169290911691909117905533600090815260209190915260409020805460ff191660011790555050565b610cc9611ec1565b610cd584848484611f21565b50505050565b6000818152600560205260409020600101546001600160a01b03163314610d445760405162461bcd60e51b815260206004820152601760248201527f596f7520617265206e6f74207468652063726561746f72000000000000000000604482015260640161092b565b60008181526005602052604090206006015460ff1615610da15760405162461bcd60e51b815260206004820152601860248201527714995cdd5b1d08185b1c9958591e481cdd589b5a5d1d195960421b604482015260640161092b565b6000818152600560205260409020600601805460ff191660011790558115610e045760008181526005602052604090206001810154600690910180546001600160a01b0390921661010002610100600160a81b0319909216919091179055610e41565b60008181526005602052604090206002810154600690910180546001600160a01b0390921661010002610100600160a81b03199092169190911790555b600081815260056020526040902060060154600160a81b900460ff1615610e85576000818152600560205260409020600401805460ff60a01b1916600160a01b1790555b5050565b6001600160a01b038516331480610ea55750610ea58533610816565b610ec15760405162461bcd60e51b815260040161092b9061339f565b610ece858585858561207b565b5050505050565b610edd611ec1565b610ee5612225565b565b60608151835114610f4c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161092b565b6000835167ffffffffffffffff811115610f6857610f68612d7b565b604051908082528060200260200182016040528015610f91578160200160208202803683370190505b50905060005b845181101561100957610fdc858281518110610fb557610fb56133ee565b6020026020010151858381518110610fcf57610fcf6133ee565b60200260200101516108c4565b828281518110610fee57610fee6133ee565b60209081029190910101526110028161341a565b9050610f97565b509392505050565b6000818152600560205260409020600101546001600160a01b031633148061105257506000818152600560205260409020600201546001600160a01b031633145b61108e5760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420796f75722067616d6560981b604482015260640161092b565b6000818152600560208190526040909120015442906110b09062015180613433565b106110f15760405162461bcd60e51b815260206004820152601160248201527011d85b59481b9bdd08199a5b9a5cda1959607a1b604482015260640161092b565b600081815260056020526040902060040154600160a01b900460ff16156111525760405162461bcd60e51b815260206004820152601560248201527411d85b5948185b1c9958591e48199a5b9a5cda1959605a1b604482015260640161092b565b600081815260056020908152604091829020600181015460039091018054845181850281018501909552808552611210946001600160a01b039093169333939291908301828280156111c357602002820191906000526020600020905b8154815260200190600101908083116111af575b50600493506111d192505050565b6040519080825280602002602001820160405280156111fa578160200160208202803683370190505b506040518060200160405280600081525061207b565b60008181526005602090815260409182902060028101546003909101805484518185028101850190955280855261128d946001600160a01b039093169333939291908301828280156111c357602002820191906000526020600020908154815260200190600101908083116111af5750600493506111d192505050565b600081815260056020818152604080842060018101546001600160a01b03908116865260068452828620805460ff19908116909155600283015490911686529185208054909216909155939092529052600401805460ff60a01b1916600160a01b179055565b6001600160a01b03831633148061130f575061130f8333610816565b61132b5760405162461bcd60e51b815260040161092b9061339f565b611336838383612277565b505050565b611343611ec1565b610ee56000612413565b611355611ec1565b610cd58484848461246d565b611369611ec1565b610ee5612556565b34678ac7230489e80000146113985760405162461bcd60e51b815260040161092b90613446565b6113b581600060016040518060200160405280600081525061246d565b6113d1816001806040518060200160405280600081525061246d565b6113ee81600260016040518060200160405280600081525061246d565b61140b81600360016040518060200160405280600081525061246d565b50565b610e85338383612593565b600081815260056020526040902060040154600160a01b900460ff16156114755760405162461bcd60e51b815260206004820152601060248201526f11d85b59481a5cc8199a5b9a5cda195960821b604482015260640161092b565b6000818152600560205260409020600201546001600160a01b031633146114e85760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206368616c6c656e6765722063616e207375626d697420726573756c6044820152601d60fa1b606482015260840161092b565b600081815260056020526040902060060154600160a81b900460ff161561154c5760405162461bcd60e51b815260206004820152601860248201527714995cdd5b1d08185b1c9958591e481cdd589b5a5d1d195960421b604482015260640161092b565b6000818152600560205260409020600601805460ff60a81b1916600160a81b179055811561159a57600081815260056020526040902060070180546001600160a01b031916331790556115d0565b60008181526005602052604090206001810154600790910180546001600160a01b0319166001600160a01b039092169190911790555b60008181526005602052604090206006015460ff1615610e8557610e85815b600081815260056020526040902060040154600160a01b900460ff1661164b5760405162461bcd60e51b815260206004820152601160248201527011d85b59481b9bdd08199a5b9a5cda1959607a1b604482015260640161092b565b60008181526005602052604090206006015460ff1680156116845750600081815260056020526040902060060154600160a81b900460ff165b6116d05760405162461bcd60e51b815260206004820181905260248201527f426f746820706c6179657273206d757374207375626d697420726573756c7473604482015260640161092b565b6000818152600560205260409020600181015460069091015461010090046001600160a01b039081169116148061172a5750600081815260056020526040902060018101546007909101546001600160a01b039081169116145b61176f5760405162461bcd60e51b81526020600482015260166024820152752cb7ba9030b932903737ba103a3432903bb4b73732b960511b604482015260640161092b565b6000818152600560205260409020600281015460069091015461010090046001600160a01b03908116911614806117c95750600081815260056020526040902060028101546007909101546001600160a01b039081169116145b61180e5760405162461bcd60e51b81526020600482015260166024820152752cb7ba9030b932903737ba103a3432903bb4b73732b960511b604482015260640161092b565b600081815260056020526040902060018101546006909101546001600160a01b03918216610100909104909116036118c75760008181526005602090815260409182902060018101546002820154600390920180548551818602810186019096528086526118c2956001600160a01b039384169594909316938301828280156111c357602002820191906000526020600020908154815260200190600101908083116111af5750600493506111d192505050565b611949565b6000818152600560209081526040918290206002810154600182015460039092018054855181860281018601909652808652611949956001600160a01b039384169594909316938301828280156111c357602002820191906000526020600020908154815260200190600101908083116111af5750600493506111d192505050565b60008181526005602081815260408084206001810180546001600160a01b03908116875260068552838720805460ff199081169091556002840154821688528488208054909116905595879052938352925460039093018054825181850281018501909352808352611a2b95949094169391929091908301828280156119ee57602002820191906000526020600020905b8154815260200190600101908083116119da575b50600493506119fc92505050565b604051908082528060200260200182016040528015611a25578160200160208202803683370190505b50612277565b60008181526005602090815260409182902060028101546003909101805484518185028101850190955280855261140b946001600160a01b03909316938301828280156119ee57602002820191906000526020600020908154815260200190600101908083116119da5750600493506119fc92505050565b34670de0b6b3a76400001480611ad057506001600160a01b03821660009081526004602052604090205415155b611aec5760405162461bcd60e51b815260040161092b90613446565b6001600160a01b03821660009081526004602052604090205415611b39576001600160a01b0382166000908152600460205260408120805460019290611b3390849061346e565b90915550505b610e8582611b4683611d5b565b60016040518060200160405280600081525061246d565b34670de0b6b3a764000014611b845760405162461bcd60e51b815260040161092b90613446565b3360009081526006602052604090205460ff1615611bd75760405162461bcd60e51b815260206004820152601060248201526f15d85b1b195d081a5cc81b1bd8dad95960821b604482015260640161092b565b6001611be43360006108c4565b10158015611bfd57506001611bfa3360016108c4565b10155b8015611c1457506001611c113360026108c4565b10155b8015611c2b57506001611c283360036108c4565b10155b611c6b5760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820746f6b656e7360781b604482015260640161092b565b60004233604051602001611c9b92919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60408051808303601f19018152918152815160209283012060008181526005909352912060010154909150600160a01b900460ff16611d0d5760405162461bcd60e51b815260206004820152600e60248201526d11d85b59481b9bdd08199bdd5b9960921b604482015260640161092b565b336000818152600660209081526040808320805460ff19166001908117909155948352600590915290206002810180546001600160a01b03191690921790915501805460ff60a01b19169055565b60408051426020808301919091528183018490528251808303840181526060909201909252805191012060009081611d94600483613481565b90506000611da3600484613481565b9050611db08160046134a3565b611dba9083613433565b95945050505050565b6001600160a01b038516331480611ddf5750611ddf8533610816565b611dfb5760405162461bcd60e51b815260040161092b9061339f565b610ece8585858585612673565b611e10611ec1565b6001600160a01b038116611e755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161092b565b61140b81612413565b6001600160a01b038316331480611e9a5750611e9a8333610816565b611eb65760405162461bcd60e51b815260040161092b9061339f565b6113368383836127ab565b6003546001600160a01b03610100909104163314610ee55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161092b565b6001600160a01b038416611f475760405162461bcd60e51b815260040161092b906134ba565b8151835114611f685760405162461bcd60e51b815260040161092b906134fb565b33611f78816000878787876128c3565b60005b845181101561201357838181518110611f9657611f966133ee565b6020026020010151600080878481518110611fb357611fb36133ee565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611ffb9190613433565b9091555081905061200b8161341a565b915050611f7b565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612064929190613543565b60405180910390a4610ece816000878787876128d1565b815183511461209c5760405162461bcd60e51b815260040161092b906134fb565b6001600160a01b0384166120c25760405162461bcd60e51b815260040161092b90613568565b336120d18187878787876128c3565b60005b84518110156121b75760008582815181106120f1576120f16133ee565b60200260200101519050600085838151811061210f5761210f6133ee565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561215f5760405162461bcd60e51b815260040161092b906135ad565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061219c908490613433565b92505081905550505050806121b09061341a565b90506120d4565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612207929190613543565b60405180910390a461221d8187878787876128d1565b505050505050565b61222d612a2c565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03831661229d5760405162461bcd60e51b815260040161092b906135f7565b80518251146122be5760405162461bcd60e51b815260040161092b906134fb565b60003390506122e1818560008686604051806020016040528060008152506128c3565b60005b83518110156123a6576000848281518110612301576123016133ee565b60200260200101519050600084838151811061231f5761231f6133ee565b602090810291909101810151600084815280835260408082206001600160a01b038c16835290935291909120549091508181101561236f5760405162461bcd60e51b815260040161092b9061363a565b6000928352602083815260408085206001600160a01b038b168652909152909220910390558061239e8161341a565b9150506122e4565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516123f7929190613543565b60405180910390a4604080516020810190915260009052610cd5565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166124935760405162461bcd60e51b815260040161092b906134ba565b33600061249f85612a75565b905060006124ac85612a75565b90506124bd836000898585896128c3565b6000868152602081815260408083206001600160a01b038b168452909152812080548792906124ed908490613433565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461254d83600089898989612ac0565b50505050505050565b61255e612b7b565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861225a3390565b816001600160a01b0316836001600160a01b0316036126065760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161092b565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166126995760405162461bcd60e51b815260040161092b90613568565b3360006126a585612a75565b905060006126b285612a75565b90506126c28389898585896128c3565b6000868152602081815260408083206001600160a01b038c168452909152902054858110156127035760405162461bcd60e51b815260040161092b906135ad565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612740908490613433565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46127a0848a8a8a8a8a612ac0565b505050505050505050565b6001600160a01b0383166127d15760405162461bcd60e51b815260040161092b906135f7565b3360006127dd84612a75565b905060006127ea84612a75565b905061280a838760008585604051806020016040528060008152506128c3565b6000858152602081815260408083206001600160a01b038a1684529091529020548481101561284b5760405162461bcd60e51b815260040161092b9061363a565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a460408051602081019091526000905261254d565b61221d868686868686612bc1565b6001600160a01b0384163b1561221d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612915908990899088908890889060040161367e565b6020604051808303816000875af1925050508015612950575060408051601f3d908101601f1916820190925261294d918101906136dc565b60015b6129fc5761295c6136f9565b806308c379a0036129955750612970613715565b8061297b5750612997565b8060405162461bcd60e51b815260040161092b9190612d68565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161092b565b6001600160e01b0319811663bc197c8160e01b1461254d5760405162461bcd60e51b815260040161092b9061379f565b60035460ff16610ee55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161092b565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612aaf57612aaf6133ee565b602090810291909101015292915050565b6001600160a01b0384163b1561221d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612b0490899089908890889088906004016137e7565b6020604051808303816000875af1925050508015612b3f575060408051601f3d908101601f19168201909252612b3c918101906136dc565b60015b612b4b5761295c6136f9565b6001600160e01b0319811663f23a6e6160e01b1461254d5760405162461bcd60e51b815260040161092b9061379f565b60035460ff1615610ee55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161092b565b60035460ff161561221d5760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b606482015260840161092b565b828054828255906000526020600020908101928215612c64579160200282015b82811115612c64578251825591602001919060010190612c49565b50612c70929150612c74565b5090565b5b80821115612c705760008155600101612c75565b80356001600160a01b0381168114612ca057600080fd5b919050565b60008060408385031215612cb857600080fd5b612cc183612c89565b946020939093013593505050565b6001600160e01b03198116811461140b57600080fd5b600060208284031215612cf757600080fd5b8135612d0281612ccf565b9392505050565b600060208284031215612d1b57600080fd5b5035919050565b6000815180845260005b81811015612d4857602081850181015186830182015201612d2c565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000612d026020830184612d22565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612db757612db7612d7b565b6040525050565b600067ffffffffffffffff821115612dd857612dd8612d7b565b5060051b60200190565b600082601f830112612df357600080fd5b81356020612e0082612dbe565b604051612e0d8282612d91565b83815260059390931b8501820192828101915086841115612e2d57600080fd5b8286015b84811015612e485780358352918301918301612e31565b509695505050505050565b600060208284031215612e6557600080fd5b813567ffffffffffffffff811115612e7c57600080fd5b612e8884828501612de2565b949350505050565b600082601f830112612ea157600080fd5b813567ffffffffffffffff811115612ebb57612ebb612d7b565b604051612ed2601f8301601f191660200182612d91565b818152846020838601011115612ee757600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612f1a57600080fd5b612f2385612c89565b9350602085013567ffffffffffffffff80821115612f4057600080fd5b612f4c88838901612de2565b94506040870135915080821115612f6257600080fd5b612f6e88838901612de2565b93506060870135915080821115612f8457600080fd5b50612f9187828801612e90565b91505092959194509250565b80358015158114612ca057600080fd5b60008060408385031215612fc057600080fd5b612cc183612f9d565b600080600080600060a08688031215612fe157600080fd5b612fea86612c89565b9450612ff860208701612c89565b9350604086013567ffffffffffffffff8082111561301557600080fd5b61302189838a01612de2565b9450606088013591508082111561303757600080fd5b61304389838a01612de2565b9350608088013591508082111561305957600080fd5b5061306688828901612e90565b9150509295509295909350565b6000806040838503121561308657600080fd5b823567ffffffffffffffff8082111561309e57600080fd5b818501915085601f8301126130b257600080fd5b813560206130bf82612dbe565b6040516130cc8282612d91565b83815260059390931b85018201928281019150898411156130ec57600080fd5b948201945b838610156131115761310286612c89565b825294820194908201906130f1565b9650508601359250508082111561312757600080fd5b5061313485828601612de2565b9150509250929050565b600081518084526020808501945080840160005b8381101561316e57815187529582019590820190600101613152565b509495945050505050565b602081526000612d02602083018461313e565b6000806000606084860312156131a157600080fd5b6131aa84612c89565b9250602084013567ffffffffffffffff808211156131c757600080fd5b6131d387838801612de2565b935060408601359150808211156131e957600080fd5b506131f686828701612de2565b9150509250925092565b6000806000806080858703121561321657600080fd5b61321f85612c89565b93506020850135925060408501359150606085013567ffffffffffffffff81111561324957600080fd5b612f9187828801612e90565b60006020828403121561326757600080fd5b612d0282612c89565b6000806040838503121561328357600080fd5b61328c83612c89565b915061329a60208401612f9d565b90509250929050565b600080604083850312156132b657600080fd5b6132bf83612c89565b915061329a60208401612c89565b600080600080600060a086880312156132e557600080fd5b6132ee86612c89565b94506132fc60208701612c89565b93506040860135925060608601359150608086013567ffffffffffffffff81111561332657600080fd5b61306688828901612e90565b60008060006060848603121561334757600080fd5b61335084612c89565b95602085013595506040909401359392505050565b600181811c9082168061337957607f821691505b60208210810361339957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161342c5761342c613404565b5060010190565b8082018082111561095757610957613404565b6020808252600e908201526d09cdee840cadcdeeaced0408aa8960931b604082015260600190565b8181038181111561095757610957613404565b60008261349e57634e487b7160e01b600052601260045260246000fd5b500690565b808202811582820484141761095757610957613404565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b604081526000613556604083018561313e565b8281036020840152611dba818561313e565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906136aa9083018661313e565b82810360608401526136bc818661313e565b905082810360808401526136d08185612d22565b98975050505050505050565b6000602082840312156136ee57600080fd5b8151612d0281612ccf565b600060033d11156137125760046000803e5060005160e01c5b90565b600060443d10156137235790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561375357505050505090565b828501915081518181111561376b5750505050505090565b843d87010160208285010111156137855750505050505090565b61379460208286010187612d91565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061382190830184612d22565b97965050505050505056fea2646970667358221220b3721564e0428a394fbccbe1016952e14c18e46ea247b2ba50f2ac5c93b3630864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 246,
        "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 252,
        "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 254,
        "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 130,
        "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
        "label": "_owner",
        "offset": 1,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2116,
        "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
        "label": "mintCredits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2147,
        "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
        "label": "games",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Game)2142_storage)"
      },
      {
        "astId": 2151,
        "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
        "label": "lockedWallets",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Game)2142_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Web3Arena1155.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)2142_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Game)2142_storage": {
        "encoding": "inplace",
        "label": "struct Web3Arena1155.Game",
        "members": [
          {
            "astId": 2118,
            "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
            "label": "gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2120,
            "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2122,
            "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
            "label": "waitingForPlayers",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2124,
            "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
            "label": "challenger",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2127,
            "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
            "label": "playersTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2129,
            "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
            "label": "winner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2131,
            "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
            "label": "finished",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 2133,
            "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
            "label": "createdAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2135,
            "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
            "label": "player1ResultSubmitted",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 2137,
            "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
            "label": "player1Winner",
            "offset": 1,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 2139,
            "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
            "label": "player2ResultSubmitted",
            "offset": 21,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 2141,
            "contract": "contracts/Web3Arena1155.sol:Web3Arena1155",
            "label": "player2Winner",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}